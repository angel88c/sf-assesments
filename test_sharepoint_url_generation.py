#!/usr/bin/env python3
"""
Test de generaci√≥n de URLs de SharePoint para oportunidades de Salesforce
Demuestra que cada proyecto obtiene su URL espec√≠fica
"""

import os
from dotenv import load_dotenv
from pathlib import Path

# Load environment
load_dotenv()

def test_url_generation():
    """Test de generaci√≥n de URLs de SharePoint."""
    
    print("=" * 80)
    print("üîó TEST: GENERACI√ìN DE URLs DE SHAREPOINT PARA SALESFORCE")
    print("=" * 80)
    
    # Configuraci√≥n de ejemplo
    base_sharepoint_url = os.getenv("PATH_TO_SHAREPOINT", "https://ibtest2020.sharepoint.com/sites/Public_Quotes_2025/Documentos")
    
    print(f"\nüìç Base SharePoint URL:")
    print(f"   {base_sharepoint_url}")
    
    # Casos de prueba
    test_cases = [
        {
            "name": "ICT - Cliente M√©xico",
            "project_path": "1_In_Circuit_Test_(ICT)/MX/ACME_Corp/Proyecto_PCB_2025",
        },
        {
            "name": "FCT - Cliente USA",
            "project_path": "2_Functional_Test_(FCT)/USA/TechCorp_Inc/Product_Test_001",
        },
        {
            "name": "IAT - Cliente Canad√°",
            "project_path": "4_Industrial_Automation_(IAT)/CAD/AutoSolutions/Robot_Station_X1",
        }
    ]
    
    print("\n" + "=" * 80)
    print("üìã EJEMPLOS DE URLs GENERADAS:")
    print("=" * 80)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        print(f"   Carpeta proyecto: {test_case['project_path']}")
        
        # Construir URL completa
        if base_sharepoint_url.endswith("/"):
            full_url = f"{base_sharepoint_url}{test_case['project_path']}"
        else:
            full_url = f"{base_sharepoint_url}/{test_case['project_path']}"
        
        print(f"   ‚úÖ URL en Salesforce (Path__c):")
        print(f"      {full_url}")
    
    print("\n" + "=" * 80)
    print("üìä COMPARACI√ìN: ANTES vs DESPU√âS")
    print("=" * 80)
    
    print("\n‚ùå ANTES (Todos iguales):")
    print(f"   {base_sharepoint_url}")
    print(f"   {base_sharepoint_url}")
    print(f"   {base_sharepoint_url}")
    print("   ‚ö†Ô∏è  Todos los proyectos apuntaban a la ra√≠z")
    
    print("\n‚úÖ DESPU√âS (URLs espec√≠ficas):")
    print(f"   {base_sharepoint_url}/1_In_Circuit_Test_(ICT)/MX/ACME_Corp/Proyecto_PCB_2025")
    print(f"   {base_sharepoint_url}/2_Functional_Test_(FCT)/USA/TechCorp_Inc/Product_Test_001")
    print(f"   {base_sharepoint_url}/4_Industrial_Automation_(IAT)/CAD/AutoSolutions/Robot_Station_X1")
    print("   ‚úÖ Cada proyecto tiene su link directo")
    
    print("\n" + "=" * 80)
    print("üéØ BENEFICIOS")
    print("=" * 80)
    
    print("\n‚úÖ Acceso directo:")
    print("   ‚Ä¢ Click en URL de Salesforce ‚Üí abre carpeta espec√≠fica del proyecto")
    print("   ‚Ä¢ No necesitas buscar manualmente en SharePoint")
    
    print("\n‚úÖ Mejor organizaci√≥n:")
    print("   ‚Ä¢ Sales Managers ven exactamente d√≥nde est√°n los archivos")
    print("   ‚Ä¢ Reducci√≥n de tiempo buscando proyectos")
    
    print("\n‚úÖ Trazabilidad:")
    print("   ‚Ä¢ Cada oportunidad sabe d√≥nde est√°n sus documentos")
    print("   ‚Ä¢ F√°cil auditor√≠a y seguimiento")
    
    print("\n" + "=" * 80)
    print("üîß IMPLEMENTACI√ìN")
    print("=" * 80)
    
    print("\nüìù Se modificaron 2 archivos:")
    print("   1. base_assessment.py (versi√≥n actual)")
    print("      ‚Ä¢ Genera URL espec√≠fica antes de crear oportunidad")
    print("      ‚Ä¢ Path__c = URL completa a carpeta del proyecto")
    
    print("\n   2. base_assessment_refactored.py (versi√≥n refactorizada)")
    print("      ‚Ä¢ M√©todo _get_sharepoint_url(project_path)")
    print("      ‚Ä¢ Construye URL bas√°ndose en project_path")
    
    print("\n" + "=" * 80)
    print("‚úÖ LISTO PARA USAR")
    print("=" * 80)
    
    print("\nüí° Pr√≥ximas oportunidades creadas tendr√°n:")
    print("   ‚Ä¢ Path__c apuntando a carpeta espec√≠fica del proyecto")
    print("   ‚Ä¢ URL clickeable directamente desde Salesforce")
    print("   ‚Ä¢ Navegaci√≥n instant√°nea a documentos del proyecto")
    
    print("\nüöÄ No requiere cambios en .env ni configuraci√≥n adicional")
    print("=" * 80 + "\n")


if __name__ == "__main__":
    try:
        test_url_generation()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Test interrumpido")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
